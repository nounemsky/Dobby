import telebot
import config
from telebot import types
import datetime
import time
import subprocess
import os
import ctypes  

from comands import shutdown_pc, schedule_shutdown, restart_pc, increase_pc_volume, decrease_pc_volume, mute_pc_volume
from spotify import play_music, pause_music, skip_track, previous_track

bot = telebot.TeleBot(config.TOKEN)

# –ü–∞–ø–∫–∞
SAVE_FOLDER = "–ü–£–¢–¨ –ö –ü–ê–ü–ö–ï"

if not os.path.exists(SAVE_FOLDER):
    os.makedirs(SAVE_FOLDER)

def validate_time_format(time_str):
    try:
        datetime.datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

is_playing = False
is_rebooting = False
is_shutting_down = False
current_volume = 100
current_spotify_volume = 100
scheduled_time = None  
is_muted = False  
previous_volume = current_volume  

def show_notification():
    ctypes.windll.user32.MessageBoxW(0, "Dobby –∑–∞–ø—É—â–µ–Ω!", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", 1)

@bot.message_handler(commands=['start'])
def welcome(message):
    if message.chat.id == config.owner_id:
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –•–æ–∑—è–∏–Ω!")
        main_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

@bot.message_handler(content_types=['document', 'photo', 'video', 'audio', 'voice'])
def handle_files(message):
    if message.chat.id == config.owner_id:
        try:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
            if message.document:
                file_info = bot.get_file(message.document.file_id)
                file_extension = message.document.file_name.split('.')[-1]
                filename = f"{timestamp}.{file_extension}"
            elif message.photo:
                file_info = bot.get_file(message.photo[-1].file_id)
                filename = f"{timestamp}.jpg"
            elif message.video:
                file_info = bot.get_file(message.video.file_id)
                filename = f"{timestamp}.mp4"
            elif message.audio:
                file_info = bot.get_file(message.audio.file_id)
                filename = f"{timestamp}.mp3"
            elif message.voice:
                file_info = bot.get_file(message.voice.file_id)
                filename = f"{timestamp}.ogg"

            file_path = file_info.file_path
            save_path = os.path.join(SAVE_FOLDER, filename)

            downloaded_file = bot.download_file(file_path)
            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.send_message(message.chat.id, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ C:\\Telegram Files") # –ü–û–ú–ï–ù–Ø–¢–¨ –ù–ê –°–í–û–ô
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

def main_menu(chat_id):
    ACTION_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üñ•")
    item2 = types.KeyboardButton("Spotify")

    markup.add(item1, item2)
    bot.send_message(chat_id, ACTION_PROMPT, reply_markup=markup)

def update_computer_markup(chat_id):
    BACK_BUTTON_TEXT = "–ù–∞–∑–∞–¥"
    computer_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    volume_button = types.KeyboardButton("üîà")
    shutdown_button = types.KeyboardButton("üîå")
    restart_button = types.KeyboardButton("üîÑ")
    back_button = types.KeyboardButton(BACK_BUTTON_TEXT)

    computer_markup.add(volume_button, shutdown_button, restart_button)
    computer_markup.add(back_button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=computer_markup)

def update_spotify_markup(chat_id):
    global is_playing
    spotify_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    left_button = types.KeyboardButton("‚óÄ")
    pause_button = types.KeyboardButton("üîâ" if is_playing else "‚è∏Ô∏è")
    right_button = types.KeyboardButton("‚ñ∂")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")

    spotify_markup.add(left_button, pause_button, right_button)
    spotify_markup.add(back_button)

    bot.send_message(chat_id, "Spotify:", reply_markup=spotify_markup)

def update_volume_markup(chat_id):
    volume_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    plus_button = types.KeyboardButton("‚ûïüîü")
    current_volume_button = types.KeyboardButton(f"üîà{current_volume}%")
    minus_button = types.KeyboardButton("‚ûñüîü")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")

    volume_markup.add(plus_button, current_volume_button, minus_button)
    volume_markup.add(back_button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏:", reply_markup=volume_markup)


def cancel_timer():
    try:
        subprocess.call(["shutdown", "/a"]) 
        return "–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–∞–π–º–µ—Ä–∞: {e}"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_message(message):
    global is_playing, is_rebooting, is_shutting_down, current_volume, scheduled_time, current_volume, is_muted, previous_volume
    if message.chat.type == 'private':
        text = message.text.lower()

        if text == '–º–æ–ª–æ–¥–µ—Ü':
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –•–æ–∑—è–∏–Ω!')

        elif text == '–∫—Ç–æ —Ç—ã?':
            bot.send_message(message.chat.id, '–î–æ–±–±–∏, –•–æ–∑—è–∏–Ω!')

        elif text == 'üñ•':
            update_computer_markup(message.chat.id)

        elif text == 'üîà':
            update_volume_markup(message.chat.id)

        elif text == f"üîà{current_volume}%":  

            if not is_muted:
                previous_volume = current_volume
                mute_pc_volume()  
                current_volume = 0
                is_muted = True
                bot.send_message(message.chat.id, "–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω.")
            else:
                current_volume = previous_volume
                increase_pc_volume(current_volume / 100)
                is_muted = False
                bot.send_message(message.chat.id, f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {current_volume}%.")
                
            update_volume_markup(message.chat.id)

        elif text == '‚ûïüîü':
            if is_muted:
                is_muted = False  
            current_volume = min(current_volume + 10, 100)
            increase_pc_volume()
            bot.send_message(message.chat.id, "–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 10%.")
            update_volume_markup(message.chat.id)


        elif text == '‚ûñüîü':
            if is_muted:
                is_muted = False  
            current_volume = max(current_volume - 10, 0)
            decrease_pc_volume()
            bot.send_message(message.chat.id, "–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ 10%.")
            update_volume_markup(message.chat.id)

        elif text == 'spotify':
            update_spotify_markup(message.chat.id)

        elif text == '‚óÄ':
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫.")
            bot.send_message(message.chat.id, previous_track())

        elif text == 'üîâ' or text == '‚è∏Ô∏è':
            if is_playing:
                bot.send_message(message.chat.id, "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.")
                bot.send_message(message.chat.id, pause_music())
                is_playing = False
            else:
                bot.send_message(message.chat.id, "–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.")
                bot.send_message(message.chat.id, play_music())
                is_playing = True
            update_spotify_markup(message.chat.id)

        elif text == '‚ñ∂':
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫.")
            bot.send_message(message.chat.id, skip_track())

        elif text == '–Ω–∞–∑–∞–¥':
            main_menu(message.chat.id)

        elif text == 'üîå':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            quick_shutdown_button = types.KeyboardButton("–ë—ã—Å—Ç—Ä–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ")
            schedule_shutdown_button = types.KeyboardButton("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")
            cancel_shutdown_button = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä")
            back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(quick_shutdown_button, schedule_shutdown_button, cancel_shutdown_button)
            markup.add(back_button)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        elif text == '–±—ã—Å—Ç—Ä–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ':
            if not is_shutting_down:
                is_shutting_down = True
                bot.send_message(message.chat.id, "–ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                time.sleep(3)
                bot.send_message(message.chat.id, "–°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ...")
                time.sleep(5)
                bot.send_message(message.chat.id, "–ó–∞–≤–µ—Ä—à–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
                time.sleep(5)
                bot.send_message(message.chat.id, shutdown_pc())
                bot.send_message(message.chat.id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω!")
                is_shutting_down = False
            else:
                bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")

        elif text == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å':
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç):")
            bot.register_next_step_handler(message, handle_schedule_shutdown)

        elif text == '—É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä':
            if scheduled_time:
                bot.send_message(message.chat.id, cancel_timer())
                scheduled_time = None  
            else:
                bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

        elif text == 'üîÑ':
            if not is_rebooting:
                is_rebooting = True
                bot.send_message(message.chat.id, "–ó–∞–∫—Ä—ã–≤–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                time.sleep(3)
                bot.send_message(message.chat.id, "–°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ...")
                time.sleep(5)
                bot.send_message(message.chat.id, "–ó–∞–≤–µ—Ä—à–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
                time.sleep(5)
                bot.send_message(message.chat.id, restart_pc())
                bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–∏—Å—Ç–µ–º—É...")
                time.sleep(5)
                bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                is_rebooting = False
            else:
                bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")

        else:
            bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def handle_schedule_shutdown(message):
    global scheduled_time  
    target_time = message.text
    if validate_time_format(target_time):
        scheduled_time = target_time  
        result = schedule_shutdown(target_time)
        bot.send_message(message.chat.id, result)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


if __name__ == "__main__":
    show_notification()  
    bot.infinity_polling(none_stop=True)  
